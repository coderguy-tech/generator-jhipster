<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.config;

import io.github.jhipster.config.JHipsterConstants;
<%_ if (devDatabaseType === 'h2Disk' || devDatabaseType === 'h2Memory') { _%>
import io.github.jhipster.config.h2.H2ConfigurationHelper;
<%_ } _%>
<%_ if (databaseType === 'sql' && reactive) { _%>
import io.r2dbc.spi.ConnectionFactory;
<%_ } _%>
<%_ if (databaseType === 'mongodb') { _%>
import com.github.cloudyrock.mongock.driver.mongodb.springdata.v3.SpringDataMongo3Driver;
import com.github.cloudyrock.spring.MongockSpring5;
import com.github.cloudyrock.spring.MongockSpring5.MongockInitializingBeanRunner;
<%_ } _%>
<%_ if (databaseType === 'mongodb') { _%>
import io.github.jhipster.domain.util.JSR310DateConverters.DateToZonedDateTimeConverter;
import io.github.jhipster.domain.util.JSR310DateConverters.ZonedDateTimeToDateConverter;
<%_ } _%>
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
<%_ if (databaseType === 'mongodb') { _%>
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration;
import org.springframework.context.ApplicationContext;
    <%_ if (reactive) { _%>
import org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration;
    <%_ } _%>
<%_ } _%>
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
<%_ if (databaseType === 'mongodb') { _%>
import org.springframework.context.annotation.Import;
<%_ } _%>
<%_ if (searchEngine === 'elasticsearch' && ['mongodb', 'neo4j'].includes(databaseType)) { _%>
import org.springframework.context.annotation.ComponentScan.Filter;
import org.springframework.context.annotation.FilterType;
<%_ } _%>
<%_ if (databaseType === 'mongodb' || devDatabaseType === 'h2Disk' || devDatabaseType === 'h2Memory') { _%>
import org.springframework.context.annotation.Profile;
<%_ } _%>
<%_ if (databaseType === 'mongodb' || (databaseType === 'sql' && reactive)) { _%>
import org.springframework.core.convert.converter.Converter;
<%_ } _%>
<%_ if (searchEngine === 'elasticsearch') { _%>
import org.springframework.data.elasticsearch.repository.config.Enable<% if (reactive) { %>Reactive<% } %>ElasticsearchRepositories;
<%_ } _%>
<%_ if (databaseType === 'neo4j') { _%>
import org.neo4j.springframework.data.repository.config.Enable<% if (reactive) { %>Reactive<% } %>Neo4jRepositories;
<%_ if (searchEngine === 'elasticsearch') { _%>
import org.neo4j.springframework.data.repository.<% if (reactive) { %>Reactive<% } %>Neo4jRepository;
<%_ } _%>
<%_ } _%>
<%_ if (databaseType === 'mongodb') { _%>
    <%_ if (!reactive) { _%>
import org.springframework.data.mongodb.config.EnableMongoAuditing;
    <%_ } _%>
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.convert.MongoCustomConversions;
import org.springframework.data.mongodb.core.mapping.event.ValidatingMongoEventListener;
    <%_ if (searchEngine === 'elasticsearch') { _%>
import org.springframework.data.mongodb.repository.<% if (reactive) { %>Reactive<% } %>MongoRepository;
    <%_ } _%>
import org.springframework.data.mongodb.repository.config.Enable<% if (reactive) { %>Reactive<% } %>MongoRepositories;
<%_ } _%>
<%_ if (databaseType === 'mongodb') { _%>
import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;
<%_ } _%>
<%_ if (databaseType === 'sql') { _%>
    <%_ if (devDatabaseType === 'h2Disk' || devDatabaseType === 'h2Memory') { _%>
import org.springframework.core.env.Environment;
    <%_ } _%>
    <%_ if (reactive) { _%>
import org.springframework.data.convert.CustomConversions;
import org.springframework.data.convert.ReadingConverter;
import org.springframework.data.convert.WritingConverter;
import org.springframework.data.r2dbc.convert.R2dbcCustomConversions;
import org.springframework.data.r2dbc.dialect.DialectResolver;
import org.springframework.data.r2dbc.dialect.R2dbcDialect;
import org.springframework.data.r2dbc.repository.config.EnableR2dbcRepositories;
    <%_ } else { _%>
import org.springframework.data.jpa.repository.config.EnableJpaAuditing;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
    <%_ } _%>
import org.springframework.transaction.annotation.EnableTransactionManagement;

<%_ if (devDatabaseType === 'h2Disk' || devDatabaseType === 'h2Memory') { _%>
import java.sql.SQLException;
<%_ } } _%>
<%_ if (databaseType === 'sql' && reactive) { _%>
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
<%_ } _%>
<%_ if (databaseType === 'mongodb') { _%>
import java.util.ArrayList;
import java.util.List;
<%_ } _%>

@Configuration
<%_ if (databaseType === 'sql') { _%>
    <%_ if (reactive) { _%>
@EnableR2dbcRepositories("<%= packageName %>.repository")
    <%_ } else { _%>
@EnableJpaRepositories("<%= packageName %>.repository")
@EnableJpaAuditing(auditorAwareRef = "springSecurityAuditorAware")
    <%_ } _%>
@EnableTransactionManagement
<%_ } _%>
<%_ if (databaseType === 'neo4j') { _%>
    <%_ if (searchEngine === 'elasticsearch') { _%>
@Enable<% if (reactive) { %>Reactive<% } %>Neo4jRepositories(basePackages = "<%= packageName %>.repository", includeFilters = @Filter(type = FilterType.ASSIGNABLE_TYPE, value = <% if (reactive) { %>Reactive<% } %>Neo4jRepository.class))
    <%_ } else { _%>
@Enable<% if (reactive) { %>Reactive<% } %>Neo4jRepositories("<%= packageName %>.repository")
    <%_ } _%>
<%_ } _%>
<%_ if (searchEngine === 'elasticsearch') { _%>
@Enable<% if (reactive) { %>Reactive<% } %>ElasticsearchRepositories("<%= packageName %>.repository.search")
<%_ } _%>
<%_ if (databaseType === 'mongodb') { _%>
    <%_ if (searchEngine === 'elasticsearch') { _%>
@Enable<% if (reactive) { %>Reactive<% } %>MongoRepositories(basePackages = "<%= packageName %>.repository", includeFilters = @Filter(type = FilterType.ASSIGNABLE_TYPE, value = <% if (reactive) { %>Reactive<% } %>MongoRepository.class))
    <%_ } else { _%>
@Enable<% if (reactive) { %>Reactive<% } %>MongoRepositories("<%= packageName %>.repository")
    <%_ } _%>
<%_ } _%>
<%_ if (databaseType === 'mongodb') { _%>
@Profile("!" + JHipsterConstants.SPRING_PROFILE_CLOUD)
<%_ } _%>
<%_ if (databaseType === 'mongodb') { _%>
    <%_ if (reactive) { _%>
@Import(value = {MongoAutoConfiguration.class, MongoReactiveAutoConfiguration.class})
    <%_ } else { _%>
@Import(value = MongoAutoConfiguration.class)
@EnableMongoAuditing(auditorAwareRef = "springSecurityAuditorAware")
    <%_ } _%>
<%_ } _%>
public class DatabaseConfiguration {

    private final Logger log = LoggerFactory.getLogger(DatabaseConfiguration.class);
<%_ if (databaseType === 'sql') { _%>
    <%_ if (devDatabaseType === 'h2Disk' || devDatabaseType === 'h2Memory') { _%>

    private final Environment env;

    public DatabaseConfiguration(Environment env) {
        this.env = env;
    }

    /**
     * Open the TCP port for the H2 database, so it is available remotely.
     *
     * @return the H2 database TCP server.
     * @throws SQLException if the server failed to start.
     */
    @Bean(initMethod = "start", destroyMethod = "stop")
    @Profile(JHipsterConstants.SPRING_PROFILE_DEVELOPMENT)
    public Object h2TCPServer() throws SQLException {
        String port = getValidPortForH2();
        log.debug("H2 database is available on port {}", port);
        return H2ConfigurationHelper.createServer(port);
    }

    private String getValidPortForH2() {
        int port = Integer.parseInt(env.getProperty("server.port"));
        if (port < 10000) {
            port = 10000 + port;
        } else {
            if (port < 63536) {
                port = port + 2000;
            } else {
                port = port - 2000;
            }
        }
        return String.valueOf(port);
    }
    <%_ } _%>
<%_ } _%>
<%_ if (databaseType === 'mongodb') { _%>

    @Bean
    public ValidatingMongoEventListener validatingMongoEventListener() {
        return new ValidatingMongoEventListener(validator());
    }

    @Bean
    public LocalValidatorFactoryBean validator() {
        return new LocalValidatorFactoryBean();
    }

    @Bean
    public MongoCustomConversions customConversions() {
        List<Converter<?, ?>> converters = new ArrayList<>();
        converters.add(DateToZonedDateTimeConverter.INSTANCE);
        converters.add(ZonedDateTimeToDateConverter.INSTANCE);
        return new MongoCustomConversions(converters);
    }

    @Bean
    public MongockInitializingBeanRunner mongockInitializingBeanRunner(ApplicationContext springContext,
              MongoTemplate mongoTemplate,
              @Value("${mongock.lock.lockAcquiredForMinutes:5}") long lockAcquiredForMinutes,
              @Value("${mongock.lock.maxWaitingForLockMinutes:3}") long maxWaitingForLockMinutes,
              @Value("${mongock.lock.maxTries:3}") int maxTries) {
        SpringDataMongo3Driver driver = new SpringDataMongo3Driver(mongoTemplate);
        return MongockSpring5.builder()
            .setDriver(driver)
            .addChangeLogsScanPackage("<%= packageName %>.config.dbmigrations")
            .setLockConfig(lockAcquiredForMinutes, maxWaitingForLockMinutes, maxTries)
            .setSpringContext(springContext)
            .buildInitializingBeanRunner();
    }
<%_ } _%>
<%_ if (databaseType === 'sql' && reactive) { _%>
    // LocalDateTime seems to be the only type that is supported across all drivers atm
    // See https://github.com/r2dbc/r2dbc-h2/pull/139 https://github.com/mirromutth/r2dbc-mysql/issues/105
    @Bean
    public R2dbcCustomConversions r2dbcCustomConversions(ConnectionFactory connectionFactory) {
        R2dbcDialect dialect = DialectResolver.getDialect(connectionFactory);
        List<Object> converters = new ArrayList<>(dialect.getConverters());
        converters.add(new InstantWriteConverter());
        converters.add(new InstantReadConverter());
        converters.addAll(R2dbcCustomConversions.STORE_CONVERTERS);
        return new R2dbcCustomConversions(
            CustomConversions.StoreConversions.of(dialect.getSimpleTypeHolder(), converters),
            Collections.emptyList());
    }

    @WritingConverter
    public static class InstantWriteConverter implements Converter<Instant, LocalDateTime> {

        public LocalDateTime convert(Instant source) {
            return LocalDateTime.ofInstant(source, ZoneOffset.UTC);
        }
    }

    @ReadingConverter
    public static class InstantReadConverter implements Converter<LocalDateTime, Instant> {

        @Override
        public Instant convert(LocalDateTime localDateTime) {
            return localDateTime.toInstant(ZoneOffset.UTC);
        }
    }
<%_ } _%>
}
